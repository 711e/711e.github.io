---
layout: post
title:  "SSD"
crawlertitle: "SSD"
summary: "SSD"
date:   2019-05-06 10:37:00 +0700
categories: posts
tags: ['Target detection']
author: 711E
---

#### 一、SSD(Single Shot MultiBox Detector)目标检测
* Single shot:SSD算法属于one-stage方法
* MultiBox:指明了SSD是多框预测

##### 1.概述
对于Faster R-CNN，其先通过CNN得到候选框，然后再进行分类与回归。而Yolo与SSD可以一步到位完成检测。相比Yolo，SSD采用CNN来直接进行检测，而不是像Yolo那样在全连接层之后做检测.
1. SSD提取了不同尺度的特征图来做检测，大尺度特征图（较靠前的特征图）可以用来检测小物体，而小尺度特征图（较靠后的特征图）用来检测大物体.
2. SSD采用了不同尺度和长宽比的先验框（Prior boxes, Default boxes，在Faster R-CNN中叫做锚，Anchors）.
![显示图片](http://711e.github.io/assets/images/SSD_0.png)

##### 2.结构
SSD和Yolo一样都是采用一个CNN网络来进行检测，但是却采用了多尺度的特征图。
###### (1)采用多尺度特征图用于检测
多尺度采用大小不同的特征图，CNN网络一般前面的特征图比较大，后面会逐渐采用stride=2的卷积或者pool来降低特征图大小，一个比较大的特征图和一个比较小的特征图，它们都用来做检测。这样做的好处是比较大的特征图来用来检测相对较小的目标，而小的特征图负责检测大目标，8x8的特征图可以划分更多的单元，但是其每个单元的先验框尺度比较小。
###### (2)采用卷积进行检测
与Yolo最后采用全连接层不同，SSD直接采用卷积对不同的特征图来进行提取检测结果。对于形状为[m×n×p]的特征图，只需要采用[3×3×p]这样比较小的卷积核得到检测值。
###### (3)设置先验框
在Yolo中，每个单元预测多个边界框，但是其都是相对这个单元本身（正方块），但是真实目标的形状是多变的，Yolo需要在训练过程中自适应目标的形状。而SSD借鉴了Faster R-CNN中anchor的理念，每个单元设置尺度或者长宽比不同的先验框，预测的边界框（bounding boxes）是以这些先验框为基准的，在一定程度上减少训练难度。一般情况下，每个单元会设置多个先验框，其尺度和长宽比存在差异，每个单元使用了4个不同的先验框，两个大小不同的正方形，两个大小相同的横竖长方形。
###### (4)SSD检测值
**对于每个单元的每个先验框，其都输出一套独立的检测值，对应一个边界框，主要分为两个部分:类别置信度和边界框位置，各采用一次3×3卷积来进行完成**
1. 各个类别的置信度或者评分，值得注意的是SSD将背景也当做了一个特殊的类别，如果检测目标共有c个类别，SSD其实需要预测c+1个置信度值，其中第一个置信度指的是不含目标或者属于背景的评分。后面当我们说c个类别置信度时，请记住里面包含背景那个特殊的类别，即真实的检测类别只有c−1个。在预测过程中，置信度最高的那个类别就是边界框所属的类别，特别地，当第一个置信度值最高时，表示边界框中并不包含目标。
2. 边界框的location，包含4个值(cx,cy,w,h)，分别表示边界框的中心坐标以及宽高。但是真实预测值其实是边界框相对于先验框的转换值。
**先验框位置用d=(dcx,dcy,dw,dh)表示，其对应边界框用b=(bcx,bcy,bw,bh)表示，那么边界框的预测值l其实是b相对于d的转换值：**
![显示图片](http://711e.github.io/assets/images/SSD_1.png)
**习惯上，我们称上面这个过程为边界框的编码（encode），预测时，你需要反向这个过程，即进行解码（decode），从预测值l中得到边界框的真实位置b：**
![显示图片](http://711e.github.io/assets/images/SSD_2.png)
**在SSD的Caffe源码实现中还有trick，那就是设置variance超参数来调整检测值，通过bool参数variance_encoded_in_target来控制两种模式，当其为True时，表示variance被包含在预测值中，就是上面那种情况。但是如果是Fasle，就需要手动设置超参数variance，用来对l的4个值进行放缩，此时边界框需要这样解码：**
![显示图片](http://711e.github.io/assets/images/SSD_3.png)
#### 二、网络结构
SSD采用VGG16作为基础模型，然后在VGG16的基础上新增了卷积层来获得更多的特征图以用于检测。SSD的网络结构如图6所示。上面是SSD模型，下面是Yolo模型，可以明显看到SSD利用了多尺度的特征图做检测。模型的输入图片大小是300×300（还可以是512×512，其与前者网络结构没有差别，只是最后新增一个卷积层）。
pool5由原来的2×2−s2变成3×3−s1，不reduce特征图大小，为了配合这种变化，采用了一种Atrous Algorithm，其实就是conv6采用扩展卷积或带孔卷积（Dilation Conv），其在不增加参数与模型复杂度的条件下指数级扩大卷积的视野，其使用扩张率(dilation rate)参数，来表示扩张的大小。
然后移除dropout层和fc8层，并新增一系列卷积层，在检测数据集上做finetuing。
先验框的尺度，其遵守一个线性递增规则：随着特征图大小降低。
#### 三、损失函数
损失函数定义为位置误差（locatization loss， loc）与置信度误差（confidence loss, conf）的加权和。
